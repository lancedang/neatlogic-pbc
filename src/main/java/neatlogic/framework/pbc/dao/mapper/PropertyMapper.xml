<?xml version="1.0" encoding="UTF-8" ?>
<!--
  ~ Copyright(c) 2023 NeatLogic Co., Ltd. All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="neatlogic.framework.pbc.dao.mapper.PropertyMapper">
    <select id="getPropertyMaxSortByInterfaceId" parameterType="java.lang.String" resultType="java.lang.Integer">
        select max(sort)
        from `pbc_property`
        where interface_id = #{value}
    </select>

    <resultMap id="propertyMap" type="neatlogic.framework.pbc.dto.PropertyVo">
        <id column="uid" property="uid"/>
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="complexId" property="complexId"/>
        <result column="complexName" property="complexName"/>
        <result column="interfaceId" property="interfaceId"/>
        <result column="interfaceName" property="interfaceName"/>
        <result column="dataType" property="dataType"/>
        <result column="valueRange" property="valueRange"/>
        <result column="restraint" property="restraint"/>
        <result column="description" property="description"/>
        <result column="definition" property="definition"/>
        <result column="transferRule" property="transferRule"/>
        <result column="defaultValue" property="propDefaultValue"/>
        <result column="mappingStr" property="mappingStr"/>
        <result column="sort" property="sort"/>
        <result column="alias" property="alias"/>
        <collection property="enumList" ofType="neatlogic.framework.pbc.dto.EnumVo">
            <result column="enumPropertyId" property="propertyId"/>
            <result column="enumValue" property="value"/>
            <result column="enumText" property="text"/>
        </collection>
        <collection property="relList" ofType="neatlogic.framework.pbc.dto.PropertyRelVo">
            <id column="fromPropertyUid" property="fromPropertyUid"/>
            <result column="toInterfaceId" property="toInterfaceId"/>
            <result column="toValuePropertyId" property="toValuePropertyId"/>
            <result column="toTextPropertyId" property="toTextPropertyId"/>
        </collection>
    </resultMap>

    <select id="getEnumByPropertyId" parameterType="java.lang.String" resultType="neatlogic.framework.pbc.dto.EnumVo">
        select property_id as propertyId, value, text
        FROM `pbc_enum`
        WHERE property_id = #{value}
    </select>

    <select id="getPropertyRestraintList"
            resultType="neatlogic.framework.common.dto.ValueTextVo">
        select distinct restraint AS `value`, restraint AS `text`
        from pbc_property
        where restraint is not null
          and restraint != ''
    </select>

    <select id="getPropertyDataTypeList"
            resultType="neatlogic.framework.common.dto.ValueTextVo">
        select distinct data_type AS `value`, data_type AS `text`
        from pbc_property
        where data_type is not null
          and data_type != ''
    </select>

    <select id="getPropertyValueRangeList"
            resultType="neatlogic.framework.common.dto.ValueTextVo">
        select distinct value_range AS `value`, value_range AS `text`
        from pbc_property
        where value_range is not null
          and value_range != ''
    </select>


    <select id="getPropertyByInterfaceId" parameterType="java.lang.String" resultMap="propertyMap">
        SELECT
        a.`uid`,
        a.`id`,
        a.`name`,
        a.`complex_id` AS complexId,
        a.`complex_name` AS complexName,
        a.`interface_id` AS interfaceId,
        (select name from `pbc_interface` pi WHERE pi.id = a.`interface_id`) AS interfaceName,
        a.`data_type` AS dataType,
        a.`value_range` AS valueRange,
        a.`restraint`,
        a.`description`,
        a.`definition`,
        a.`sort`,
        a.`alias`,
        b.mapping AS mappingStr,
        b.transfer_rule AS transferRule,
        b.default_value AS defaultValue,
        c.property_id AS enumPropertyId,
        c.value AS enumValue,
        c.text AS enumText,
        d.from_property_uid AS fromPropertyUid,
        d.to_interface_id AS toInterfaceId,
        d.to_value_property_id AS toValuePropertyId,
        d.to_text_property_id AS toTextPropertyId
        FROM `pbc_property` a
        <!--复合属性映射需join条件需带上complex_id -->
        LEFT JOIN `pbc_property_mapping` b on a.uid = b.property_uid
        LEFT JOIN `pbc_enum` c ON a.id = c.property_id
        LEFT JOIN `pbc_property_rel` d ON a.uid = d.from_property_uid
        WHERE a.interface_id = #{value}
        ORDER BY a.sort
    </select>

    <select id="getPropertyByInterfaceComplexId" resultMap="propertyMap">
        SELECT a.`uid`,
               a.`id`,
               a.`name`,
               a.`complex_id`   AS complexId,
               a.`complex_name` AS complexName,
               a.`interface_id` AS interfaceId,
               a.`data_type`    AS dataType,
               a.`value_range`  AS valueRange,
               a.`restraint`,
               a.`description`,
               a.`definition`,
               a.`sort`,
               a.`alias`,
               b.mapping        AS mappingStr,
               b.transfer_rule  AS transferRule,
               b.default_value  AS defaultValue,
               c.property_id    AS enumPropertyId,
               c.value          AS enumValue,
               c.text           AS enumText
        FROM `pbc_property` a
                 LEFT JOIN `pbc_property_mapping` b on a.uid = b.property_uid
                 LEFT JOIN `pbc_enum` c ON a.id = c.property_id
        WHERE a.interface_id = #{interfaceId}
          AND a.complex_id = #{complexId}
        ORDER by a.sort
    </select>

    <select id="checkPropertyIsExists" resultType="int">
        SELECT COUNT(1)
        FROM `pbc_property`
        WHERE interface_id = #{interfaceId}
          AND id = #{propertyId}
          AND complex_id = #{complexId}
    </select>

    <sql id="searchPropertySql">
        <where>
            <if test="keyword != null and keyword!=''">
                AND (a.id LIKE CONCAT('%',#{keyword},'%') or a.complex_id LIKE CONCAT('%',#{keyword},'%') or a.name LIKE
                CONCAT('%',#{keyword},'%') or a.complex_name
                LIKE CONCAT('%',#{keyword},'%'))
            </if>
            <if test="interfaceId != null and interfaceId!=''">
                AND a.interface_id = #{interfaceId}
            </if>
            <if test="dataType != null and dataType!=''">
                AND a.data_type = #{dataType}
            </if>
            <if test="restraint != null and restraint != ''">
                AND a.restraint = #{restraint}
            </if>
            <if test="valueRange != null and valueRange != ''">
                AND a.value_range = #{valueRange}
            </if>
        </where>
    </sql>

    <select id="searchPropertyCount" parameterType="neatlogic.framework.pbc.dto.PropertyVo" resultType="int">
        SELECT COUNT(1)
        FROM `pbc_property` a
        <include refid="searchPropertySql"></include>
    </select>

    <select id="searchProperty" parameterType="neatlogic.framework.pbc.dto.PropertyVo"
            resultType="neatlogic.framework.pbc.dto.PropertyVo">
        SELECT
        a.`uid`,
        a.`id`,
        a.`name`,
        a.`complex_id` AS complexId,
        a.`complex_name` AS complexName,
        a.`interface_id` AS interfaceId,
        inter.`name` AS interfaceName,
        a.`data_type` AS dataType,
        a.`value_range` AS valueRange,
        a.`restraint`,
        a.`description`,
        a.`definition`
        FROM `pbc_property` a
        JOIN `pbc_interface` inter ON a.interface_id = inter.id
        <include refid="searchPropertySql"></include>
        ORDER by uid
        LIMIT #{startNum}, #{pageSize}
    </select>

    <select id="getPropertyByUid" resultMap="propertyMap">
        SELECT a.`uid`,
               a.`id`,
               a.`name`,
               a.`complex_id`   AS complexId,
               a.`complex_name` AS complexName,
               a.`interface_id` AS interfaceId,
               a.`data_type`    AS dataType,
               a.`value_range`  AS valueRange,
               a.`restraint`,
               a.`description`,
               a.`definition`,
               a.`sort`,
               a.`alias`,
               b.mapping        AS mappingStr,
               b.transfer_rule  AS transferRule,
               b.default_value  AS defaultValue,
               c.property_id    AS enumPropertyId,
               c.value          AS enumValue,
               c.text           AS enumText
        FROM `pbc_property` a
                 LEFT JOIN `pbc_property_mapping` b on a.uid = b.property_uid
                 LEFT JOIN `pbc_enum` c ON a.id = c.property_id
        WHERE a.`uid` = #{uid}
    </select>

    <select id="getPropertyDataType" resultType="java.lang.String">
        SELECT DISTINCT(data_type) AS dataType FROM pbc_property
        <where>
            <if test="dataType != null and dataType!=''">
                AND data_type LIKE CONCAT('%',#{dataType},'%')
            </if>
        </where>
    </select>

    <select id="getPropertyValueRange" resultType="java.lang.String">
        SELECT DISTINCT(value_range) AS valueRange FROM pbc_property
        <where>
            <if test="valueRange != null and valueRange!=''">
                AND value_range LIKE CONCAT('%',#{valueRange},'%')
            </if>
        </where>
    </select>

    <select id="getPropertyRestraint" resultType="java.lang.String">
        SELECT DISTINCT(restraint) AS restraint FROM pbc_property
        <where>
            <if test="restraint != null and restraint!=''">
                AND restraint LIKE CONCAT('%',#{restraint},'%')
            </if>
        </where>
    </select>

    <select id="checkPropertyRelIsExists" parameterType="neatlogic.framework.pbc.dto.PropertyRelVo" resultType="int">
        select count(1)
        from pbc_property_rel
        where from_property_uid = #{fromPropertyUid}
          and to_interface_id = #{toInterfaceId}
    </select>


    <select id="getPropertyRelByFromPropertyUid" parameterType="java.lang.Long"
            resultType="neatlogic.framework.pbc.dto.PropertyRelVo">
        select id,
               from_property_uid    AS fromPropertyUid,
               to_interface_id      AS toInterfaceId,
               to_value_property_id AS toValuePropertyId,
               to_text_property_id  AS toTextPropertyId
        from pbc_property_rel
        where from_property_uid = #{value}
    </select>

    <update id="updatePropertySort" parameterType="neatlogic.framework.pbc.dto.PropertyVo">
        UPDATE pbc_property
        SET sort = #{sort}
        WHERE id = #{id}
          AND interface_id = #{interfaceId}
          AND complex_id = #{complexId}
    </update>

    <update id="updateProperty" parameterType="neatlogic.framework.pbc.dto.PropertyVo">
        UPDATE
            pbc_property
        SET name         = #{name},
            complex_name = #{complexName},
            interface_id = #{interfaceId},
            data_type    = #{dataType},
            value_range  = #{valueRange},
            restraint    = #{restraint},
            definition   = #{definition},
            description  = #{description},
            definition   = #{definition},
            example      = #{example},
            alias        = #{alias},
            is_key       = #{isKey}
        WHERE id = #{id}
          AND interface_id = #{interfaceId}
          AND complex_id = #{complexId}
    </update>

    <update id="updatePropertyByUid" parameterType="neatlogic.framework.pbc.dto.PropertyVo">
        UPDATE
            pbc_property
        SET id           = #{id},
            name         = #{name},
            complex_id   = #{complexId},
            complex_name = #{complexName},
            interface_id = #{interfaceId},
            data_type    = #{dataType},
            value_range  = #{valueRange},
            restraint    = #{restraint},
            definition   = #{definition},
            description  = #{description},
            example      = #{example},
            alias        = #{alias},
            is_key       = #{isKey}
        WHERE uid = #{uid}
    </update>

    <update id="updatePropertyRel" parameterType="neatlogic.framework.pbc.dto.PropertyRelVo">
        UPDATE
            pbc_property_rel
        SET to_interface_id      = #{toInterfaceId},
            to_value_property_id = #{toValuePropertyId},
            to_text_property_id  = #{toTextPropertyId}
        WHERE id = #{id}
    </update>


    <insert id="insertProperty" parameterType="neatlogic.framework.pbc.dto.PropertyVo">
        INSERT INTO pbc_property
        (`uid`,
         `id`,
         `name`,
         `complex_id`,
         `complex_name`,
         `interface_id`,
         `alias`,
         `data_type`,
         `value_range`,
         `restraint`,
         `definition`,
         `description`,
         `example`,
         `is_key`,
         `sort`)
        VALUES (#{uid},
                #{id},
                #{name},
                #{complexId},
                #{complexName},
                #{interfaceId},
                #{alias},
                #{dataType},
                #{valueRange},
                #{restraint},
                #{definition},
                #{description},
                #{example},
                #{isKey},
                #{sort})
        ON DUPLICATE KEY
            UPDATE `name`         = #{name},
                   `complex_id`   = #{complexId},
                   `id`           = #{id},
                   `complex_name` = #{complexName},
                   `alias`        = #{alias},
                   `data_type`    = #{dataType},
                   `value_range`  = #{valueRange},
                   `restraint`    = #{restraint},
                   `definition`   = #{definition},
                   `description`  = #{description},
                   `example`      = #{example},
                   `is_key`       = #{isKey}
    </insert>

    <insert id="insertPropertyMapping" parameterType="neatlogic.framework.pbc.dto.PropertyVo">
        INSERT
        INTO pbc_property_mapping
        (`interface_id`,
         `complex_id`,
         `property_id`,
         `property_uid`,
         `mapping`,
         `default_value`,
         `transfer_rule`)
        VALUES (#{interfaceId},
                #{complexId},
                #{id},
                #{uid},
                #{mappingStr},
                #{propDefaultValue},
                #{transferRule})
    </insert>

    <insert id="insertPropertyRel" parameterType="neatlogic.framework.pbc.dto.PropertyRelVo">
        INSERT INTO pbc_property_rel
        (`id`,
         `from_property_uid`,
         `to_interface_id`,
         `to_text_property_id`,
         `to_value_property_id`)
        VALUES (#{id},
                #{fromPropertyUid},
                #{toInterfaceId},
                #{toTextPropertyId},
                #{toValuePropertyId})
    </insert>

    <insert id="insertEnum" parameterType="neatlogic.framework.pbc.dto.EnumVo">
        INSERT INTO pbc_enum (property_id, value, text)
        VALUES (#{propertyId}, #{value}, #{text})
    </insert>

    <delete id="deleteEnumByPropertyId" parameterType="java.lang.String">
        DELETE
        FROM pbc_enum
        WHERE property_id = #{value}
    </delete>

    <delete id="deletePropertyMappingByInterfaceId" parameterType="java.lang.String">
        DELETE
        FROM `pbc_property_mapping`
        WHERE interface_id = #{value}
    </delete>

    <delete id="deletePropertyByUid" parameterType="java.lang.Long">
        DELETE
        FROM `pbc_property`
        WHERE uid = #{value}
    </delete>

    <delete id="deletePropertyRelByFromPropertyUid" parameterType="java.lang.Integer">
        DELETE
        FROM `pbc_property_rel`
        WHERE from_property_uid = #{value}
    </delete>

</mapper>